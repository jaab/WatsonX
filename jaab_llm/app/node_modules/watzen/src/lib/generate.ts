// Copyright IBM Corp. 2023, 2024
import {request} from 'graphql-request'
import _ from 'lodash'

import {IntrospectionQuery, getIntrospectionQuery} from 'graphql'
import {ErrorOr} from '../shared/types'

async function generateSchema(
  url: string,
  apikey?: string,
): Promise<ErrorOr<IntrospectionQuery>> {
  const query = getIntrospectionQuery()
  const requestHeaders = apikey
    ? {
        Authorization: `apikey ${apikey}`,
      }
    : undefined
  const response = await request({
    url,
    document: query,
    requestHeaders: {'Content-Type': 'application/json', ...requestHeaders},
  })
    .then(data => {
      return data as Promise<IntrospectionQuery>
    })
    .catch(error => {
      return error
    })

  if (!response?.__schema) {
    return {
      error: {
        message:
          `Error introspecting the endpoint ${url}: \n` +
          `${JSON.stringify(response?.response?.errors)}`,
      },
    }
  }

  return response
}

export {generateSchema}
