// Copyright IBM Corp. 2023, 2024
import {request, gql} from 'graphql-request'
import {ErrorOr} from '../shared/types'

type Result = {
  [key: string]: string
}

const fetchFlow = async (
  url: string,
  name: string,
  question: string,
  apikey?: string,
): Promise<ErrorOr<Result>> => {
  const requestHeaders = apikey
    ? {
        Authorization: `apikey ${apikey}`,
      }
    : undefined

  const query = gql`query ${name}($input: String) {
      ${name}(input: $input)
    }
  `
  const response = await request({
    url,
    document: query,
    variables: {input: question},
    requestHeaders: requestHeaders,
  })
    .then(data => {
      return data as Promise<Result>
    })
    .catch(error => {
      return error
    })

  if (response?.response?.errors) {
    return {
      error: {
        message:
          `Error requesting ${url}: \n` +
          `${JSON.stringify(response.response.errors)}`,
      },
    }
  }

  return response
}

export {fetchFlow}
