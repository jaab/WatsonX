/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { ComponentType, FunctionComponent } from 'react';
export type TreeNodeProps = {
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * The ID of the active node in the tree
     */
    active?: string | number;
    /**
     * Specify the children of the TreeNode
     */
    children?: React.ReactNode;
    /**
     * Specify an optional className to be applied to the TreeNode
     */
    className?: string;
    /**
     * **[Experimental]** The default expansion state of the node.
     * *This is only supported with the `enable-treeview-controllable` feature flag!*
     */
    defaultIsExpanded?: boolean;
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * TreeNode depth to determine spacing
     */
    depth?: number;
    /**
     * Specify if the TreeNode is disabled
     */
    disabled?: boolean;
    /**
     * Specify the TreeNode's ID. Must be unique in the DOM and is used for props.active and props.selected
     */
    id?: string;
    /**
     * Specify if the TreeNode is expanded (only applicable to parent nodes)
     */
    isExpanded?: boolean;
    /**
     * Rendered label for the TreeNode
     */
    label: React.ReactNode;
    /**
     * Callback function for when the node receives or loses focus
     */
    onNodeFocusEvent?: (event: React.FocusEvent<HTMLLIElement>) => void;
    /**
     * Callback function for when the node is selected
     */
    onSelect?: (event: React.MouseEvent, node?: TreeNodeProps) => void;
    /**
     * Callback function for when a parent node is expanded or collapsed
     */
    onToggle?: (event: React.MouseEvent, node?: TreeNodeProps) => void;
    /**
     * Callback function for when any node in the tree is selected
     */
    onTreeSelect?: (event: React.MouseEvent, node?: TreeNodeProps) => void;
    /**
     * Optional prop to allow each node to have an associated icon.
     * Can be a React component class
     */
    renderIcon?: ComponentType | FunctionComponent;
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * Array containing all selected node IDs in the tree
     */
    selected?: Array<string | number>;
    /**
     * Specify the value of the TreeNode
     */
    value?: string;
} & Omit<React.LiHTMLAttributes<HTMLLIElement>, 'onSelect'>;
declare const TreeNode: React.ForwardRefExoticComponent<{
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * The ID of the active node in the tree
     */
    active?: string | number | undefined;
    /**
     * Specify the children of the TreeNode
     */
    children?: React.ReactNode;
    /**
     * Specify an optional className to be applied to the TreeNode
     */
    className?: string | undefined;
    /**
     * **[Experimental]** The default expansion state of the node.
     * *This is only supported with the `enable-treeview-controllable` feature flag!*
     */
    defaultIsExpanded?: boolean | undefined;
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * TreeNode depth to determine spacing
     */
    depth?: number | undefined;
    /**
     * Specify if the TreeNode is disabled
     */
    disabled?: boolean | undefined;
    /**
     * Specify the TreeNode's ID. Must be unique in the DOM and is used for props.active and props.selected
     */
    id?: string | undefined;
    /**
     * Specify if the TreeNode is expanded (only applicable to parent nodes)
     */
    isExpanded?: boolean | undefined;
    /**
     * Rendered label for the TreeNode
     */
    label: React.ReactNode;
    /**
     * Callback function for when the node receives or loses focus
     */
    onNodeFocusEvent?: ((event: React.FocusEvent<HTMLLIElement>) => void) | undefined;
    /**
     * Callback function for when the node is selected
     */
    onSelect?: ((event: React.MouseEvent, node?: TreeNodeProps) => void) | undefined;
    /**
     * Callback function for when a parent node is expanded or collapsed
     */
    onToggle?: ((event: React.MouseEvent, node?: TreeNodeProps) => void) | undefined;
    /**
     * Callback function for when any node in the tree is selected
     */
    onTreeSelect?: ((event: React.MouseEvent, node?: TreeNodeProps) => void) | undefined;
    /**
     * Optional prop to allow each node to have an associated icon.
     * Can be a React component class
     */
    renderIcon?: React.ComponentType<{}> | undefined;
    /**
     * **Note:** this is controlled by the parent TreeView component, do not set manually.
     * Array containing all selected node IDs in the tree
     */
    selected?: (string | number)[] | undefined;
    /**
     * Specify the value of the TreeNode
     */
    value?: string | undefined;
} & Omit<React.LiHTMLAttributes<HTMLLIElement>, "onSelect"> & React.RefAttributes<HTMLLIElement>>;
export default TreeNode;
