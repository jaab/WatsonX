// Copyright IBM Corp. 2023, 2024
import {rawRequest, gql} from 'graphql-request'
import _ from 'lodash'

import {buildClientSchema} from 'graphql'
import {generateSampleOperation} from '../graphql-helpers'
import {defaultRagVariables} from '../utils/variables'
import {ErrorOr} from '../shared/types'

type flowVars = {
  n?: number
  collection?: string
  question?: string
  aiEngine?: string
  model?: string
  parameters?: {
    max_new_tokens?: number
    temperature?: number
  }
  searchEngine?: string
}

type IntrospectionFlowValues = {
  query?: string
  variables?: Record<string, any>
  error?: string
}

const fetchFlow = async (
  url: string,
  flowName: string,
  schema: string,
  apikey?: string,
  vars?: flowVars,
  inputQuery?: string,
) => {
  const defaultVariables: flowVars = defaultRagVariables
  const variables = _.merge(
    vars,
    _.pick(vars, _.keys(defaultVariables)),
  )

  const introspectFlowName = (
    inputVars: flowVars,
    flowName: string,
  ): ErrorOr<IntrospectionFlowValues> => {
    const graphqlSchemaObj = buildClientSchema(JSON.parse(schema))
    const {query, variables, error} = generateSampleOperation({
      inputVars: inputVars,
      flowName: flowName,
      schema: graphqlSchemaObj,
      depthLimit: 2,
    })

    if (error) {
      return {
        error: {
          message: `${error} Did you provide the proper variables and flow?`,
        },
      }
    }

    return {
      result: {
        query,
        variables,
      },
    }
  }

  const buildQuery = () => introspectFlowName(variables, flowName)
  const requestQuery = inputQuery ? {result: {query: inputQuery}} : buildQuery()

  if (requestQuery.error) {
    return requestQuery.error.message
  }

  const requestHeaders = apikey
    ? {
        Authorization: `apikey ${apikey}`,
      }
    : undefined

  const {data, extensions} = await rawRequest({
    url,
    query: gql`
      ${requestQuery.result.query}
    `,
    variables: variables,
    requestHeaders: {
      'stepzen-debug-level': '1',
      'X-Graphql-Analytics-Enabled': 'true',
      ...requestHeaders,
    },
  })

  return {data, extensions}
}

export {fetchFlow, flowVars}
