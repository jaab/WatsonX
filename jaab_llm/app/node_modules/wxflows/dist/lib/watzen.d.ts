import { RagVars } from './rag';
interface wxflowsProps {
    endpoint: string;
    apikey?: string;
    flowName?: string;
    vars?: {
        rag?: RagVars;
    };
}
type PromptProps = {
    lc_serializable: true;
    lc_kwargs: {
        value: string;
    };
    lc_namespace: [string];
    value: string;
};
declare class wxflows {
    endpoint: string;
    apikey?: string;
    flowName?: string;
    vars?: {
        rag?: RagVars;
    };
    constructor({ endpoint, apikey, flowName, vars }: wxflowsProps);
    flow: ({ flowName, question, }: {
        flowName?: string | undefined;
        question: string;
    }) => Promise<unknown>;
    generate: () => Promise<string>;
    getFields: ({ schema }: {
        schema: string;
    }) => string;
    ragAnswer: ({ schema, flowName, variables, query, }: {
        schema?: string | undefined;
        flowName?: string | undefined;
        variables?: RagVars | undefined;
        query?: string | undefined;
    }) => Promise<string | {
        data: unknown;
        extensions: unknown;
    }>;
    call(prompt: PromptProps): Promise<string | {
        data: unknown;
        extensions: unknown;
    } | undefined>;
    pipe(): wxflows;
    invoke(prompt: PromptProps): Promise<string | {
        data: unknown;
        extensions: unknown;
    } | undefined>;
}
export default wxflows;
//# sourceMappingURL=wxflows.d.ts.map