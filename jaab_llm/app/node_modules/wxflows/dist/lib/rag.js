"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRag = void 0;
// Copyright IBM Corp. 2023, 2024
const graphql_request_1 = require("graphql-request");
const lodash_1 = __importDefault(require("lodash"));
const graphql_1 = require("graphql");
const graphql_helpers_1 = require("../graphql-helpers");
const variables_1 = require("../utils/variables");
const fetchRag = async (url, flowName, schema, apikey, vars, inputQuery) => {
    const defaultVariables = variables_1.defaultRagVariables;
    const variables = lodash_1.default.merge(vars, lodash_1.default.pick(vars, lodash_1.default.keys(defaultVariables)));
    const introspectFlowName = (inputVars, flowName) => {
        const graphqlSchemaObj = (0, graphql_1.buildClientSchema)(JSON.parse(schema));
        const { query, variables, error } = (0, graphql_helpers_1.generateSampleOperation)({
            inputVars: inputVars,
            flowName: flowName,
            schema: graphqlSchemaObj,
            depthLimit: 2,
        });
        if (error) {
            return {
                error: {
                    message: `${error} Did you provide the proper variables and flow?`,
                },
            };
        }
        return {
            result: {
                query,
                variables,
            },
        };
    };
    const buildQuery = () => introspectFlowName(variables, flowName);
    const requestQuery = inputQuery ? { result: { query: inputQuery } } : buildQuery();
    if (requestQuery.error) {
        return requestQuery.error.message;
    }
    const requestHeaders = apikey
        ? {
            Authorization: `apikey ${apikey}`,
        }
        : undefined;
    const { data, extensions } = await (0, graphql_request_1.rawRequest)({
        url,
        query: (0, graphql_request_1.gql) `
      ${requestQuery.result.query}
    `,
        variables: variables,
        requestHeaders: {
            'stepzen-debug-level': '1',
            'X-Graphql-Analytics-Enabled': 'true',
            ...requestHeaders,
        },
    });
    return { data, extensions };
};
exports.fetchRag = fetchRag;
//# sourceMappingURL=rag.js.map