import { type GraphQLArgument, type GraphQLField, type GraphQLSchema, type GraphQLType } from 'graphql';
import { RagVars } from './lib/rag';
/**
 * Compile arguments dictionary for a field
 * @param field current field object
 * @param duplicateArgCounts map for deduping argument name collisions
 * @param allArgsDict dictionary of all arguments
 */
export declare const getFieldArgsDict: (field: GraphQLField<any, any>, duplicateArgCounts: Record<string, number>, allArgsDict?: Record<string, GraphQLArgument>) => Record<string, GraphQLArgument>;
/**
 * Generate variables string
 * @param dict dictionary of arguments
 */
export declare const getArgsToVarsStr: (dict: Record<string, GraphQLArgument>) => string;
/**
 * Generate types string
 * @param dict dictionary of arguments
 */
export declare const getVarsToTypesStr: (dict: Record<string, GraphQLArgument>) => string;
/**
 * Generate a example value for a given a GraphQL type
 * @param type GraphQL type
 */
export declare const getSampleValueOfType: (type: GraphQLType) => any;
export declare const getSampleVars: (dict: Record<string, GraphQLArgument>) => {
    [k: string]: any;
};
export declare class GqlGenerator {
    private inputVars;
    private flowName;
    private gqlSchema;
    private depthLimit;
    private includeDeprecatedFields;
    constructor(inputVars: RagVars, flowName: string, gqlSchema: GraphQLSchema, depthLimit?: number, includeDeprecatedFields?: boolean);
    /**
     * Generate a selection for the specified field
     *
     * @param fieldName name of a field on a GraphQL type
     * @param parentTypeName name of the parent GraphQL type
     * @param parentFieldName name of the parent field
     * @param argumentsDict dictionary of arguments from all fields
     * @param duplicateArgCounts map for deduping argument name collisions
     * @param crossReferenceKeyList list of the cross reference
     * @param curDepth current depth of field
     * @param fromUnion adds additional depth for unions to avoid empty child
     */
    generateFieldSelection({ fieldName, parentTypeName, parentFieldName, argumentsDict, duplicateArgCounts, crossReferenceKeyList, // [`${parentFieldName}To${fieldName}Key`]
    curDepth, fromUnion, }: {
        fieldName: string;
        parentTypeName: string;
        parentFieldName?: string;
        argumentsDict?: Record<string, GraphQLArgument>;
        duplicateArgCounts?: Record<string, number>;
        crossReferenceKeyList?: string[];
        curDepth?: number;
        fromUnion?: boolean;
    }): {
        selection: string;
        argumentsDict: Record<string, GraphQLArgument>;
    };
    generateSampleOperation(): {
        query?: string;
        vars?: Record<string, any>;
        error?: string;
    };
}
export declare const generateSampleOperation: ({ inputVars, flowName, schema, depthLimit, includeDeprecatedFields, }: {
    inputVars: RagVars;
    flowName: string;
    schema: GraphQLSchema;
    depthLimit?: number | undefined;
    includeDeprecatedFields?: boolean | undefined;
}) => {
    query?: string;
    variables?: Record<string, any>;
    error?: string;
};
//# sourceMappingURL=graphiql-helpers.d.ts.map